star
Python Python logo and wordmark.svg
Paradigm 	Object-oriented, imperative, functional, procedural, reflective
Designed by 	Guido van Rossum
Developer 	Python Software Foundation
First appeared 	20 February 1991; 27 years ago[1]
Stable release 	
3.6.4 / 19 December 2017; 2 months ago[2]
2.7.14 / 16 September 2017; 5 months ago[3]
Preview release 	
3.7.0b1 / 2018
Typing discipline 	Duck, dynamic, strong
License 	Python Software Foundation License
Filename extensions 	.py, .pyc, .pyd, .pyo (prior to 3.5),[4] .pyw, .pyz (since 3.5)[5]
Website 	python.org
Major implementations
CPython, IronPython, Jython, MicroPython, Numba, PyPy, Stackless Python
Dialects
Cython, RPython
Influenced by
ABC,[6] ALGOL 68,[7] C,[8] C++,[9] CLU,[10] Dylan,[11] Haskell,[12] Icon,[13] Java,[14] Lisp,[15] Modula-3,[9] Perl
Influenced
Boo, Cobra, Coconut,[16] CoffeeScript,[17] D, F#, Falcon, Genie,[18] Go, Groovy, JavaScript,[19][20] Julia,[21] Nim, Ring,[22] Ruby,[23] Swift[24]

    Python Programming at Wikibooks 

Python is an interpreted high-level programming language for general-purpose programming. Created by Guido van Rossum and first released in 1991, Python has a design philosophy that emphasizes code readability, and a syntax that allows programmers to express concepts in fewer lines of code,[25][26] notably using significant whitespace. It provides constructs that enable clear programming on both small and large scales.[27]

Python features a dynamic type system and automatic memory management. It supports multiple programming paradigms, including object-oriented, imperative, functional and procedural, and has a large and comprehensive standard library.[28]

Python interpreters are available for many operating systems. CPython, the reference implementation of Python, is open source software[29] and has a community-based development model, as do nearly all of its variant implementations. CPython is managed by the non-profit Python Software Foundation.

Contents

    1 History
    2 Features and philosophy
    3 Syntax and semantics
        3.1 Indentation
        3.2 Statements and control flow
        3.3 Expressions
        3.4 Methods
        3.5 Typing
        3.6 Mathematics
    4 Libraries
    5 Development environments
    6 Implementations
        6.1 Reference implementation
        6.2 Other implementations
        6.3 Unsupported implementations
        6.4 Cross-compilers to other languages
        6.5 Performance
    7 Development
    8 Naming
    9 Uses
    10 Languages influenced by Python
    11 See also
    12 References
    13 Further reading
    14 External links

History
Guido van Rossum, the creator of Python
Main article: History of Python

Python was conceived in the late 1980s,[30] and its implementation began in December 1989[31] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC language (itself inspired by SETL)[32] capable of exception handling and interfacing with the Amoeba operating system.[6] Van Rossum remains Python's principal author. His  			continuing central role in Python's development is reflected in the title given to him by the Python community: Benevolent Dictator For Life (BDFL).

On the origins of Python, Van Rossum wrote in 1996:[33]

    ...In December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office ... would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers. I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus).
    — Guido van Rossum

Python 2.0 was released on 16 October 2000 and had many major new features, including a cycle-detecting garbage collector and support for Unicode. With this release, the development process became more transparent and community-backed.[34]

Python 3.0 (initially called Python 3000 or py3k) was released on 3 December 2008 after a long testing period. It is a major revision of the language that is not completely backward-compatible with previous versions.[35] However, many of its major features have been backported to the Python 2.6.x[36] and 2.7.x version series, and releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3.[37]

Python 2.7's end-of-life date (a.k.a. EOL, sunset date) was initially set at 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[38][39]

Python 3.6 had changes regarding UTF-8 (in Windows, PEP 528 and PEP 529) and Python 3.7.0b1 (PEP 540) adds a new "UTF-8 Mode" (and overrides POSIX locale).

In January 2017, Google announced work on a Python 2.7 to Go transcompiler to improve performance under concurrent workloads.[40]
Features and philosophy

Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of its features support functional programming and aspect-oriented programming (including by metaprogramming[41] and metaobjects (magic methods)).[42] Many other paradigms are supported via extensions, including design by contract[43][44] and logic programming.[45]

Python uses dynamic typing, and a combination of reference counting and a cycle-detecting garbage collector for memory management. It also features dynamic name resolution (late binding), which binds method and variable names during program execution.

Python's design offers some support for functional programming in the Lisp tradition. It has filter(), map(), and reduce() functions; list comprehensions, dictionaries, and sets; and generator expressions.[46] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[47]

The language's core philosophy is summarized in the document The Zen of Python (PEP 20), which includes aphorisms such as:[48]

    Beautiful is better than ugly
    Explicit is better than implicit
    Simple is better than complex
    Complex is better than complicated
    Readability counts

Rather than having all of its functionality built into its core, Python was designed to be highly extensible. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[30]

While offering choice in coding methodology, the Python philosophy rejects exuberant syntax (such as that of Perl) in favor of a simpler, less-cluttered grammar. As Alex Martelli put it: "To describe something as 'clever' is not considered a compliment in the Python culture."[49] Python's philosophy rejects the Perl "there is more than one way to do it" approach to language design in favor of "there should be one—and preferably only one—obvious way to do it".[48]

Python's developers strive to avoid premature optimization, and reject patches to non-critical parts of CPython that would offer marginal increases in speed at the cost of clarity.[50] When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C, or use PyPy, a just-in-time compiler. Cython is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.

An important goal of Python's developers is keeping it fun to use. This is reflected in the language's name—a tribute to the British comedy group Monty Python[51]—and in occasionally playful approaches to tutorials and reference materials, such as examples that refer to spam and eggs (from a famous Monty Python sketch) instead of the standard foo and bar.[52][53]

A common neologism in the Python community is pythonic, which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.

Users and admirers of Python, especially those considered knowledgeable or experienced, are often referred to as Pythonists, Pythonistas, and Pythoneers.[54][55]
Syntax and semantics
Main article: Python syntax and semantics

Python is meant to be an easily readable language. Its formatting is visually uncluttered, and it often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are optional. It has fewer syntactic exceptions and special cases than C or Pascal.[56]
Indentation
Main article: Python syntax and semantics § Indentation

Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[57] This feature is also sometimes termed the off-side rule.
Statements and control flow

Python's statements include (among others):

    The assignment statement (token '=', the equals sign). This operates differently than in traditional imperative programming languages, and this fundamental mechanism (including the nature of Python's version of variables) illuminates many other features of the language. Assignment in C, e.g., x = 2, translates to "typed variable name x receives a copy of numeric value 2". The (right-hand) value is copied into an allocated storage location for which the (left-hand) variable name is the symbolic address. The memory allocated to the variable is large enough (potentially quite large) for the declared type. In the simplest case of Python assignment, using the same example, x = 2, translates to "(generic) name x receives a reference to a separate, dynamically allocated object of numeric (int) type of value 2." This is termed binding the name to the object. Since the name's storage location doesn't contain the indicated value, it is improper to call it a variable. Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., x = 2; y = 2; z = 2 result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed data type with it. However at a given time a name will be bound to some object, which will have a type; thus there is dynamic typing.
    The if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if).
    The for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block.
    The while statement, which executes a block of code as long as its condition is true.
    The try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits.
    The class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming.
    The def statement, which defines a function or method.
    The with statement (from Python 2.5), which encloses a code block within a context manager (for example, acquiring a lock before the block of code is run and releasing the lock afterwards, or opening a file and then cl
